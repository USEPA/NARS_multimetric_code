% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ProcIBI_General_byNumMets.r
\name{prIBI_byNumMets}
\alias{prIBI_byNumMets}
\title{Construct and evaluate MMI based on various numbers of metrics, 
regardless of metric type.}
\usage{
prIBI_byNumMets(
  df,
  metList,
  idVars,
  siteVar = "SITE_ID",
  refVar,
  year = NULL,
  indexvis,
  least,
  most,
  nummets,
  nsamp = 1000,
  seed = 20160310
)
}
\arguments{
\item{df}{Input data frame with each sample in one row, with sample-identifying 
variables and metrics as columns. Assumed to have metrics already scored or 
rescaled (in whatever manner is desired). Ideally, the MMI is 
built on only calibration sites, and it is assumed any sites in the input 
dataset will be included in MMI development, so exclude any sites that 
shouldn't be used ahead of time. It is assumed that there are multiple visits 
for some sites and that the `indexvis` argument identifies the visit to use 
for most tests (except signal-to-noise). The default value for the Site 
identifier is `SITE_ID`.}

\item{metList}{Vector of metric names to be used in selecting metrics to
combine into candidate multimetric indices (MMIs). If scored metrics have 
different names than raw metric values, be sure these 
names are the ones in this data frame.}

\item{idVars}{Variable or combination of variables in `df` used to 
identify individual samples.}

\item{siteVar}{String containing name of variable that identifies unique 
site ID (across years if site was sampled in multiple years). 
Default value is SITE_ID.}

\item{refVar}{String containing name of reference variable in the dataset}

\item{year}{String containing the name of the year variable in the dataset. 
The default value is NULL. If NULL, signal-to-noise calculation is based
only on within year revisits.}

\item{indexvis}{String containing name of variable to identify whether a 
visit is the index visit to a site, with values of Yes/No. If a record has
an indexvis value of No, it will only be included in signal-to-noise 
calculations.}

\item{least}{Value of `refVar` for least disturbed sites in dataset.}

\item{most}{Value of `refVar` for most disturbed sites in dataset.}

\item{nummets}{Numeric vector with numbers of metrics to test 
(i.e., c(4,6) tests combinations of 4 metrics and 6 metrics).}

\item{nsamp}{Number of random combinations to test for each number of 
metrics, with a default of 1000.}

\item{seed}{Random seed to supply to random number generator used to 
randomly select metric combinations. Default is 20160310.}
}
\value{
A data frame containing the iteration number, 
and for each iteration, the combination of metrics in the MMI,
percent of most disturbed sites falling statistically below reference 
(interval test, pct_MMI_M), mean MMI score among reference sites (mn_mmi_ref),
standard deviation among reference sites (sd_mmi_ref), 
signal-to-noise ratio, maximum correlation among
metrics (max_corr), and mean correlation among metrics (mean_corr).
}
\description{
This function allows the user to automate the process of constructing and 
comparing multimetric indices built from various numbers of metrics. 
This particular function allows the user to 
decide on the number of iterations to compare, with a default of 1000. 
This version of the function uses an input of metric names and
uses this information to construct random combinations of metrics built 
using specified numbers of metric. 
Several tests are carried out and results are provided for 
each constructed MMI as the output of this function. The tests include the 
mean and standard deviation of reference sites, proportion of intermediate 
and most disturbed sites statistically below reference (interval test), 
and mean and max correlations among metrics within a given MMI. A signal-to-
noise statistic is also calculated for each constructed MMI. 
This code can be customized for the type of data available to the user, so 
some tests can be dropped and others added. The primary benefit of this
code is the set up of randomly selected combinations of metrics.
}
